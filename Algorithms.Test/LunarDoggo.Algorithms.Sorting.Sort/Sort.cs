// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=Sort_e91a00f5b4
ROOST_METHOD_SIG_HASH=Sort_77d77f7e8e

   ########## Test-Scenarios ##########  

Based on the provided method and context, here are several test scenarios for the InsertionSort<T> class:

Scenario 1: Sort an already sorted array

Details:
  TestName: SortAlreadySortedArray
  Description: Verify that the Sort method correctly handles an array that is already in sorted order.
Execution:
  Arrange: Create an array of integers that is already sorted in ascending order.
  Act: Call the Sort method on the array.
  Assert: Verify that the array remains in the same order after sorting.
Validation:
  This test ensures that the algorithm doesn't unnecessarily modify an already sorted array, which is an important edge case for efficiency.

Scenario 2: Sort a reverse-sorted array

Details:
  TestName: SortReverseSortedArray
  Description: Check if the Sort method correctly sorts an array that is in descending order.
Execution:
  Arrange: Create an array of integers sorted in descending order.
  Act: Call the Sort method on the array.
  Assert: Verify that the array is now sorted in ascending order.
Validation:
  This test checks the algorithm's ability to handle a worst-case scenario where every element needs to be moved.

Scenario 3: Sort an array with duplicate elements

Details:
  TestName: SortArrayWithDuplicates
  Description: Ensure that the Sort method correctly handles arrays containing duplicate elements.
Execution:
  Arrange: Create an array of integers with several duplicate values.
  Act: Call the Sort method on the array.
  Assert: Verify that the array is sorted correctly with duplicates in the right positions.
Validation:
  This test confirms that the algorithm can handle non-unique elements, which is a common real-world scenario.

Scenario 4: Sort an empty array

Details:
  TestName: SortEmptyArray
  Description: Verify that the Sort method handles an empty array without throwing exceptions.
Execution:
  Arrange: Create an empty array of integers.
  Act: Call the Sort method on the empty array.
  Assert: Verify that no exception is thrown and the array remains empty.
Validation:
  This test ensures that the algorithm gracefully handles edge cases like empty arrays without crashing.

Scenario 5: Sort an array with a single element

Details:
  TestName: SortSingleElementArray
  Description: Check if the Sort method correctly handles an array with only one element.
Execution:
  Arrange: Create an array with a single integer element.
  Act: Call the Sort method on the array.
  Assert: Verify that the array remains unchanged.
Validation:
  This test covers another edge case, ensuring the algorithm works correctly with minimal input.

Scenario 6: Sort an array of strings

Details:
  TestName: SortStringArray
  Description: Verify that the Sort method can correctly sort an array of strings.
Execution:
  Arrange: Create an unsorted array of strings.
  Act: Call the Sort method on the string array.
  Assert: Verify that the strings are sorted in lexicographical order.
Validation:
  This test ensures that the generic implementation works correctly with non-numeric types like strings.

Scenario 7: Sort a large array

Details:
  TestName: SortLargeArray
  Description: Test the performance and correctness of the Sort method with a large number of elements.
Execution:
  Arrange: Create a large array (e.g., 10,000 elements) of random integers.
  Act: Call the Sort method on the large array.
  Assert: Verify that the array is correctly sorted and measure the time taken.
Validation:
  This test checks both the correctness and efficiency of the algorithm for larger datasets.

Scenario 8: Sort an array of custom objects

Details:
  TestName: SortCustomObjectArray
  Description: Verify that the Sort method can correctly sort an array of custom objects implementing IComparable<T>.
Execution:
  Arrange: Create an array of custom objects (e.g., Person class with age property) implementing IComparable<T>.
  Act: Call the Sort method on the array of custom objects.
  Assert: Verify that the objects are sorted correctly based on their comparison logic.
Validation:
  This test ensures that the generic implementation works correctly with custom types that implement IComparable<T>.

These scenarios cover various aspects of the InsertionSort<T> implementation, including edge cases, different data types, and potential real-world usage scenarios.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using LunarDoggo.Algorithms.Sorting;

namespace LunarDoggo.Algorithms.Sorting.Test
{
    [TestFixture]
    public class SortTest
    {
        private InsertionSort<int> intSorter;
        private InsertionSort<string> stringSorter;

        [SetUp]
        public void Setup()
        {
            intSorter = new InsertionSort<int>();
            stringSorter = new InsertionSort<string>();
        }

        [Test, Category("valid")]
        public void SortAlreadySortedArray()
        {
            int[] array = { 1, 2, 3, 4, 5 };
            int[] expected = { 1, 2, 3, 4, 5 };
            intSorter.Sort(array);
            Assert.AreEqual(expected, array);
        }

        [Test, Category("valid")]
        public void SortReverseSortedArray()
        {
            int[] array = { 5, 4, 3, 2, 1 };
            int[] expected = { 1, 2, 3, 4, 5 };
            intSorter.Sort(array);
            Assert.AreEqual(expected, array);
        }

        [Test, Category("valid")]
        public void SortArrayWithDuplicates()
        {
            int[] array = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };
            int[] expected = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };
            intSorter.Sort(array);
            Assert.AreEqual(expected, array);
        }

        [Test, Category("boundary")]
        public void SortEmptyArray()
        {
            int[] array = { };
            intSorter.Sort(array);
            Assert.IsEmpty(array);
        }

        [Test, Category("boundary")]
        public void SortSingleElementArray()
        {
            int[] array = { 1 };
            int[] expected = { 1 };
            intSorter.Sort(array);
            Assert.AreEqual(expected, array);
        }

        [Test, Category("valid")]
        public void SortStringArray()
        {
            string[] array = { "banana", "apple", "cherry", "date" };
            string[] expected = { "apple", "banana", "cherry", "date" };
            stringSorter.Sort(array);
            Assert.AreEqual(expected, array);
        }

        [Test, Category("valid")]
        public void SortLargeArray()
        {
            Random random = new Random(42); // Seed for reproducibility
            int[] array = new int[10000];
            for (int i = 0; i < array.Length; i++)
            {
                array[i] = random.Next();
            }

            int[] expected = (int[])array.Clone();
            Array.Sort(expected);

            intSorter.Sort(array);
            Assert.AreEqual(expected, array);
        }

        [Test, Category("valid")]
        public void SortCustomObjectArray()
        {
            Person[] array = {
                new Person("Alice", 30),
                new Person("Bob", 25),
                new Person("Charlie", 35)
            };

            Person[] expected = {
                new Person("Bob", 25),
                new Person("Alice", 30),
                new Person("Charlie", 35)
            };

            InsertionSort<Person> personSorter = new InsertionSort<Person>();
            personSorter.Sort(array);

            Assert.AreEqual(expected, array);
        }
    }

    public class Person : IComparable<Person>
    {
        public string Name { get; }
        public int Age { get; }

        public Person(string name, int age)
        {
            Name = name;
            Age = age;
        }

        public int CompareTo(Person other)
        {
            return Age.CompareTo(other.Age);
        }

        public override bool Equals(object obj)
        {
            return obj is Person person &&
                   Name == person.Name &&
                   Age == person.Age;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Name, Age);
        }
    }
}
