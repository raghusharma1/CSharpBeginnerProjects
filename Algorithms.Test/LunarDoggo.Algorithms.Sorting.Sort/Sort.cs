// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=Sort_e91a00f5b4
ROOST_METHOD_SIG_HASH=Sort_77d77f7e8e

   ########## Test-Scenarios ##########  

Based on the provided method and context, here are several test scenarios for the InsertionSort<T> class:

Scenario 1: Sort an Already Sorted Array

Details:
  TestName: SortAlreadySortedArray
  Description: Verify that the Sort method handles an already sorted array correctly without making unnecessary swaps.
Execution:
  Arrange: Create an array of integers that is already in ascending order.
  Act: Call the Sort method on the array.
  Assert: Verify that the array remains in the same order after sorting.
Validation:
  This test ensures that the algorithm is efficient when dealing with pre-sorted data, which is a common edge case for sorting algorithms.

Scenario 2: Sort a Reverse Sorted Array

Details:
  TestName: SortReverseSortedArray
  Description: Test the Sort method's ability to correctly order an array that is initially in descending order.
Execution:
  Arrange: Create an array of integers in descending order.
  Act: Invoke the Sort method on the array.
  Assert: Check that the resulting array is in ascending order.
Validation:
  This scenario tests the algorithm's performance on a worst-case input, ensuring it can handle completely reversed data efficiently.

Scenario 3: Sort an Array with Duplicate Elements

Details:
  TestName: SortArrayWithDuplicates
  Description: Ensure that the Sort method correctly handles arrays containing duplicate values.
Execution:
  Arrange: Create an array of integers with several duplicate values.
  Act: Call the Sort method on the array.
  Assert: Verify that the array is sorted in ascending order with duplicates properly placed.
Validation:
  This test confirms that the algorithm maintains stability and correctly positions duplicate elements.

Scenario 4: Sort an Empty Array

Details:
  TestName: SortEmptyArray
  Description: Verify that the Sort method handles an empty array without throwing exceptions.
Execution:
  Arrange: Create an empty array of integers.
  Act: Invoke the Sort method on the empty array.
  Assert: Check that the method completes without errors and the array remains empty.
Validation:
  This scenario ensures that the algorithm gracefully handles edge cases like empty inputs without crashing.

Scenario 5: Sort an Array with a Single Element

Details:
  TestName: SortSingleElementArray
  Description: Test the Sort method's behavior when given an array containing only one element.
Execution:
  Arrange: Create an array with a single integer element.
  Act: Call the Sort method on the single-element array.
  Assert: Verify that the array remains unchanged after sorting.
Validation:
  This test checks that the algorithm correctly handles minimal input sizes without unnecessary operations.

Scenario 6: Sort an Array of Custom Objects

Details:
  TestName: SortCustomObjectArray
  Description: Ensure that the Sort method can correctly order an array of custom objects that implement IComparable<T>.
Execution:
  Arrange: Create an array of custom objects (e.g., Person objects with age as the comparison criteria).
  Act: Invoke the Sort method on the array of custom objects.
  Assert: Check that the resulting array is sorted based on the custom object's comparison logic.
Validation:
  This scenario verifies that the algorithm works correctly with generic types and respects custom comparison logic.

Scenario 7: Sort a Large Array

Details:
  TestName: SortLargeArray
  Description: Test the Sort method's performance and correctness when dealing with a large number of elements.
Execution:
  Arrange: Create a large array (e.g., 100,000 elements) with random integers.
  Act: Call the Sort method on the large array.
  Assert: Verify that the resulting array is correctly sorted in ascending order.
Validation:
  This test ensures that the algorithm scales well and maintains correctness for larger datasets.

Scenario 8: Sort an Array of Minimum and Maximum Values

Details:
  TestName: SortArrayWithExtremeValues
  Description: Verify that the Sort method correctly handles arrays containing minimum and maximum values of the data type.
Execution:
  Arrange: Create an array of integers including int.MinValue and int.MaxValue.
  Act: Invoke the Sort method on the array.
  Assert: Check that the array is correctly sorted with extreme values in their proper positions.
Validation:
  This scenario tests the algorithm's ability to handle edge cases involving extreme values without overflow or underflow issues.

These test scenarios cover various aspects of the InsertionSort<T> implementation, including common use cases, edge cases, and potential performance considerations.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using LunarDoggo.Algorithms.Sorting;

namespace LunarDoggo.Algorithms.Sorting.Test
{
    [TestFixture]
    public class SortTest
    {
        private InsertionSort<int> _sorter;

        [SetUp]
        public void Setup()
        {
            _sorter = new InsertionSort<int>();
        }

        [Test, Category("valid")]
        public void SortAlreadySortedArray()
        {
            int[] array = { 1, 2, 3, 4, 5 };
            int[] expected = { 1, 2, 3, 4, 5 };

            _sorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("valid")]
        public void SortReverseSortedArray()
        {
            int[] array = { 5, 4, 3, 2, 1 };
            int[] expected = { 1, 2, 3, 4, 5 };

            _sorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("valid")]
        public void SortArrayWithDuplicates()
        {
            int[] array = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };
            int[] expected = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };

            _sorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("boundary")]
        public void SortEmptyArray()
        {
            int[] array = { };

            _sorter.Sort(array);

            Assert.That(array, Is.Empty);
        }

        [Test, Category("boundary")]
        public void SortSingleElementArray()
        {
            int[] array = { 42 };
            int[] expected = { 42 };

            _sorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("valid")]
        public void SortCustomObjectArray()
        {
            var array = new Person[]
            {
                new Person("Alice", 30),
                new Person("Bob", 25),
                new Person("Charlie", 35)
            };

            var expected = new Person[]
            {
                new Person("Bob", 25),
                new Person("Alice", 30),
                new Person("Charlie", 35)
            };

            var sorter = new InsertionSort<Person>();
            sorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("valid")]
        public void SortLargeArray()
        {
            const int arraySize = 100000;
            int[] array = new int[arraySize];
            Random random = new Random(42); // Seed for reproducibility

            for (int i = 0; i < arraySize; i++)
            {
                array[i] = random.Next();
            }

            _sorter.Sort(array);

            Assert.That(array, Is.Ordered);
        }

        [Test, Category("boundary")]
        public void SortArrayWithExtremeValues()
        {
            int[] array = { int.MaxValue, 0, int.MinValue, 42, -1 };
            int[] expected = { int.MinValue, -1, 0, 42, int.MaxValue };

            _sorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }
    }

    public class Person : IComparable<Person>
    {
        public string Name { get; }
        public int Age { get; }

        public Person(string name, int age)
        {
            Name = name;
            Age = age;
        }

        public int CompareTo(Person other)
        {
            return Age.CompareTo(other.Age);
        }

        public override bool Equals(object obj)
        {
            return obj is Person person &&
                   Name == person.Name &&
                   Age == person.Age;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(Name, Age);
        }
    }
}
