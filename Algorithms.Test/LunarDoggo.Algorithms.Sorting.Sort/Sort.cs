// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=Sort_e91a00f5b4
ROOST_METHOD_SIG_HASH=Sort_77d77f7e8e

   ########## Test-Scenarios ##########  

Based on the provided method and context, here are several test scenarios for the InsertionSort<T> class:

Scenario 1: Sort an already sorted array

Details:
  TestName: SortAlreadySortedArray
  Description: Verify that the Sort method correctly handles an array that is already in sorted order.
Execution:
  Arrange: Create an array of integers that is already sorted in ascending order.
  Act: Call the Sort method on the array.
  Assert: Verify that the array remains in the same order after sorting.
Validation:
  This test ensures that the algorithm doesn't unnecessarily modify an already sorted array, which is an important edge case for efficiency.

Scenario 2: Sort a reverse-sorted array

Details:
  TestName: SortReverseSortedArray
  Description: Test the Sort method's ability to correctly sort an array that is in descending order.
Execution:
  Arrange: Create an array of integers sorted in descending order.
  Act: Call the Sort method on the array.
  Assert: Verify that the array is now sorted in ascending order.
Validation:
  This test checks the algorithm's performance on a worst-case scenario input, ensuring it can handle completely reversed arrays.

Scenario 3: Sort an array with duplicate elements

Details:
  TestName: SortArrayWithDuplicates
  Description: Ensure the Sort method correctly handles arrays containing duplicate elements.
Execution:
  Arrange: Create an array of integers with several duplicate values.
  Act: Call the Sort method on the array.
  Assert: Verify that the array is sorted in ascending order with duplicates properly placed.
Validation:
  This test confirms that the algorithm can handle non-unique elements, which is crucial for real-world data sets.

Scenario 4: Sort an array with a single element

Details:
  TestName: SortSingleElementArray
  Description: Verify the Sort method's behavior when given an array with only one element.
Execution:
  Arrange: Create an array containing a single integer.
  Act: Call the Sort method on the array.
  Assert: Verify that the array remains unchanged.
Validation:
  This edge case ensures the algorithm doesn't malfunction when given a trivially sorted array of length 1.

Scenario 5: Sort an empty array

Details:
  TestName: SortEmptyArray
  Description: Test the Sort method's handling of an empty array.
Execution:
  Arrange: Create an empty array of integers.
  Act: Call the Sort method on the empty array.
  Assert: Verify that no exception is thrown and the array remains empty.
Validation:
  This test checks that the algorithm gracefully handles edge cases like empty arrays without throwing exceptions.

Scenario 6: Sort an array of strings

Details:
  TestName: SortStringArray
  Description: Verify that the Sort method works correctly with non-numeric types like strings.
Execution:
  Arrange: Create an unsorted array of strings.
  Act: Call the Sort method on the string array.
  Assert: Verify that the strings are sorted in lexicographical order.
Validation:
  This test ensures that the generic implementation works correctly with different comparable types, not just numbers.

Scenario 7: Sort a large array

Details:
  TestName: SortLargeArray
  Description: Test the Sort method's performance and correctness on a large array.
Execution:
  Arrange: Create a large array (e.g., 10,000 elements) of random integers.
  Act: Call the Sort method on the large array.
  Assert: Verify that the array is correctly sorted in ascending order.
Validation:
  This test checks the algorithm's ability to handle larger datasets, which is important for real-world applications.

Scenario 8: Sort an array of custom objects

Details:
  TestName: SortCustomObjectArray
  Description: Verify that the Sort method works correctly with a custom class that implements IComparable<T>.
Execution:
  Arrange: Create an array of custom objects that implement IComparable<T>.
  Act: Call the Sort method on the array of custom objects.
  Assert: Verify that the array is sorted according to the custom comparison logic.
Validation:
  This test ensures that the algorithm works correctly with user-defined types, demonstrating its flexibility and adherence to the generic constraint.


*/

// ********RoostGPT********
using NUnit.Framework;
using System;
using System.Linq;
using LunarDoggo.Algorithms.Sorting;

namespace LunarDoggo.Algorithms.Sorting.Test
{
    [TestFixture]
    public class SortTest
    {
        private InsertionSort<int> _intSorter;
        private InsertionSort<string> _stringSorter;

        [SetUp]
        public void Setup()
        {
            _intSorter = new InsertionSort<int>();
            _stringSorter = new InsertionSort<string>();
        }

        [Test, Category("valid")]
        public void SortAlreadySortedArray()
        {
            int[] array = { 1, 2, 3, 4, 5 };
            int[] expected = { 1, 2, 3, 4, 5 };

            _intSorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("valid")]
        public void SortReverseSortedArray()
        {
            int[] array = { 5, 4, 3, 2, 1 };
            int[] expected = { 1, 2, 3, 4, 5 };

            _intSorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("valid")]
        public void SortArrayWithDuplicates()
        {
            int[] array = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };
            int[] expected = { 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9 };

            _intSorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("boundary")]
        public void SortSingleElementArray()
        {
            int[] array = { 42 };
            int[] expected = { 42 };

            _intSorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("boundary")]
        public void SortEmptyArray()
        {
            int[] array = { };

            _intSorter.Sort(array);

            Assert.That(array, Is.Empty);
        }

        [Test, Category("valid")]
        public void SortStringArray()
        {
            string[] array = { "banana", "apple", "cherry", "date" };
            string[] expected = { "apple", "banana", "cherry", "date" };

            _stringSorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        [Test, Category("valid")]
        public void SortLargeArray()
        {
            Random random = new Random(42); // Seed for reproducibility
            int[] array = Enumerable.Range(0, 10000).Select(_ => random.Next()).ToArray();

            _intSorter.Sort(array);

            Assert.That(array, Is.Ordered);
        }

        [Test, Category("valid")]
        public void SortCustomObjectArray()
        {
            var array = new CustomComparable[]
            {
                new CustomComparable(3),
                new CustomComparable(1),
                new CustomComparable(4),
                new CustomComparable(2)
            };

            var expected = new CustomComparable[]
            {
                new CustomComparable(1),
                new CustomComparable(2),
                new CustomComparable(3),
                new CustomComparable(4)
            };

            var sorter = new InsertionSort<CustomComparable>();
            sorter.Sort(array);

            Assert.That(array, Is.EqualTo(expected));
        }

        private class CustomComparable : IComparable<CustomComparable>
        {
            public int Value { get; }

            public CustomComparable(int value)
            {
                Value = value;
            }

            public int CompareTo(CustomComparable other)
            {
                return Value.CompareTo(other.Value);
            }

            public override bool Equals(object obj)
            {
                return obj is CustomComparable other && Value == other.Value;
            }

            public override int GetHashCode()
            {
                return Value.GetHashCode();
            }
        }
    }
}
