// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=Run_bbc3b7dcfd
ROOST_METHOD_SIG_HASH=Run_23f9485d25

   ########## Test-Scenarios ##########  

Based on the provided method and context, here are several test scenarios for the `Run` method of the `BreadthFirstSearch` class:

Scenario 1: Null Graph Handling

Details:
  TestName: ThrowArgumentNullExceptionWhenGraphIsNull
  Description: Verify that the method throws an ArgumentNullException when a null graph is passed.
Execution:
  Arrange: Create a BreadthFirstSearch instance and set up a null graph and a valid start vertex.
  Act: Call the Run method with the null graph and valid start vertex.
  Assert: Expect an ArgumentNullException to be thrown.
Validation:
  This test ensures that the method properly handles null input for the graph parameter, maintaining robustness and preventing null reference exceptions later in the execution.

Scenario 2: Single Vertex Graph

Details:
  TestName: ProcessSingleVertexGraphCorrectly
  Description: Ensure the method correctly processes a graph with only one vertex.
Execution:
  Arrange: Create a graph with a single vertex and instantiate a BreadthFirstSearch object.
  Act: Run the BFS algorithm on this graph.
  Assert: Verify that the single vertex is processed (Processed = true) and its Distance is 0.
Validation:
  This test confirms that the BFS algorithm works correctly for the simplest possible graph, setting a baseline for more complex scenarios.

Scenario 3: Linear Graph Traversal

Details:
  TestName: TraverseLinearGraphCorrectly
  Description: Check if the BFS algorithm correctly traverses a linear graph (a chain of vertices).
Execution:
  Arrange: Create a linear graph with multiple vertices connected in a line. Set up a BreadthFirstSearch instance.
  Act: Run the BFS algorithm starting from one end of the linear graph.
  Assert: Verify that all vertices are processed in order, with distances increasing by 1 for each step away from the start.
Validation:
  This test ensures that the BFS algorithm correctly handles a simple linear structure, properly assigning distances and processing vertices in order.

Scenario 4: Cyclic Graph Handling

Details:
  TestName: HandleCyclicGraphWithoutInfiniteLoop
  Description: Verify that the BFS algorithm correctly handles a graph with cycles without getting stuck in an infinite loop.
Execution:
  Arrange: Create a graph with a cycle (e.g., A -> B -> C -> A). Set up a BreadthFirstSearch instance.
  Act: Run the BFS algorithm starting from any vertex in the cycle.
  Assert: Check that all vertices are processed exactly once and have correct distances assigned.
Validation:
  This test confirms that the algorithm can handle cycles in the graph without revisiting vertices or getting stuck, which is crucial for graphs with loops.

Scenario 5: Disconnected Graph Components

Details:
  TestName: ProcessOnlyReachableVerticesInDisconnectedGraph
  Description: Ensure that BFS only processes vertices reachable from the start vertex in a disconnected graph.
Execution:
  Arrange: Create a graph with two disconnected components. Choose a start vertex from one component.
  Act: Run the BFS algorithm from the chosen start vertex.
  Assert: Verify that only vertices in the same component as the start vertex are processed, while vertices in the other component remain unprocessed.
Validation:
  This test checks that the BFS algorithm respects the graph's structure and doesn't magically jump to unreachable components, which is important for correctly analyzing partially connected graphs.

Scenario 6: Correct Distance Calculation

Details:
  TestName: CalculateCorrectDistancesInComplexGraph
  Description: Verify that the BFS algorithm calculates correct distances in a more complex graph structure.
Execution:
  Arrange: Create a complex graph with multiple paths between vertices. Set up a BreadthFirstSearch instance.
  Act: Run the BFS algorithm from a chosen start vertex.
  Assert: Check that each vertex has been assigned the correct minimum distance from the start vertex.
Validation:
  This test ensures that the BFS algorithm correctly identifies the shortest path to each vertex, which is a key property of breadth-first search in unweighted graphs.

Scenario 7: Proper Predecessor Assignment

Details:
  TestName: AssignCorrectPredecessorsInBFSTraversal
  Description: Check if the BFS algorithm correctly assigns predecessor vertices during traversal.
Execution:
  Arrange: Create a graph with a known structure. Instantiate a BreadthFirstSearch object.
  Act: Run the BFS algorithm from a specific start vertex.
  Assert: Verify that each processed vertex (except the start) has a correct predecessor assigned, forming a valid BFS tree.
Validation:
  This test confirms that the algorithm correctly builds the BFS tree, which is crucial for applications like path reconstruction or understanding the traversal order.

These scenarios cover various aspects of the BreadthFirstSearch algorithm, including edge cases and typical use cases, helping ensure the correctness and robustness of the implementation.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.Datastructures.Graphs;
using LunarDoggo.Algorithms.Graphs.Pathfinding;
using System;
using System.Collections.Generic;
using System.Linq;

namespace LunarDoggo.Algorithms.Graphs.Pathfinding.Test
{
    [TestFixture]
    public class RunTest
    {
        private BreadthFirstSearch bfs;

        [SetUp]
        public void Setup()
        {
            bfs = new BreadthFirstSearch();
        }

        [Test, Category("invalid")]
        public void ThrowArgumentNullExceptionWhenGraphIsNull()
        {
            var startVertex = new Vertex<BFSVertex>(0, new BFSVertex());
            Assert.Throws<ArgumentNullException>(() => bfs.Run(null, startVertex));
        }

        [Test, Category("valid")]
        public void ProcessSingleVertexGraphCorrectly()
        {
            var graph = new UndirectedUnweightedGraph<BFSVertex>();
            var vertex = graph.AddVertex(new BFSVertex());

            bfs.Run(graph, vertex);

            Assert.IsTrue(vertex.Value.Processed);
            Assert.AreEqual(0, vertex.Value.Distance);
        }

        [Test, Category("valid")]
        public void TraverseLinearGraphCorrectly()
        {
            var graph = new UndirectedUnweightedGraph<BFSVertex>();
            var v1 = graph.AddVertex(new BFSVertex());
            var v2 = graph.AddVertex(new BFSVertex());
            var v3 = graph.AddVertex(new BFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);

            bfs.Run(graph, v1);

            Assert.IsTrue(v1.Value.Processed);
            Assert.IsTrue(v2.Value.Processed);
            Assert.IsTrue(v3.Value.Processed);
            Assert.AreEqual(0, v1.Value.Distance);
            Assert.AreEqual(1, v2.Value.Distance);
            Assert.AreEqual(2, v3.Value.Distance);
        }

        [Test, Category("valid")]
        public void HandleCyclicGraphWithoutInfiniteLoop()
        {
            var graph = new UndirectedUnweightedGraph<BFSVertex>();
            var v1 = graph.AddVertex(new BFSVertex());
            var v2 = graph.AddVertex(new BFSVertex());
            var v3 = graph.AddVertex(new BFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);
            graph.AddEdge(v3, v1);

            bfs.Run(graph, v1);

            Assert.IsTrue(v1.Value.Processed);
            Assert.IsTrue(v2.Value.Processed);
            Assert.IsTrue(v3.Value.Processed);
            Assert.AreEqual(0, v1.Value.Distance);
            Assert.AreEqual(1, v2.Value.Distance);
            Assert.AreEqual(1, v3.Value.Distance);
        }

        [Test, Category("valid")]
        public void ProcessOnlyReachableVerticesInDisconnectedGraph()
        {
            var graph = new UndirectedUnweightedGraph<BFSVertex>();
            var v1 = graph.AddVertex(new BFSVertex());
            var v2 = graph.AddVertex(new BFSVertex());
            var v3 = graph.AddVertex(new BFSVertex());
            var v4 = graph.AddVertex(new BFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v3, v4);

            bfs.Run(graph, v1);

            Assert.IsTrue(v1.Value.Processed);
            Assert.IsTrue(v2.Value.Processed);
            Assert.IsFalse(v3.Value.Processed);
            Assert.IsFalse(v4.Value.Processed);
        }

        [Test, Category("valid")]
        public void CalculateCorrectDistancesInComplexGraph()
        {
            var graph = new UndirectedUnweightedGraph<BFSVertex>();
            var v1 = graph.AddVertex(new BFSVertex());
            var v2 = graph.AddVertex(new BFSVertex());
            var v3 = graph.AddVertex(new BFSVertex());
            var v4 = graph.AddVertex(new BFSVertex());
            var v5 = graph.AddVertex(new BFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v1, v3);
            graph.AddEdge(v2, v4);
            graph.AddEdge(v3, v4);
            graph.AddEdge(v4, v5);

            bfs.Run(graph, v1);

            Assert.AreEqual(0, v1.Value.Distance);
            Assert.AreEqual(1, v2.Value.Distance);
            Assert.AreEqual(1, v3.Value.Distance);
            Assert.AreEqual(2, v4.Value.Distance);
            Assert.AreEqual(3, v5.Value.Distance);
        }

        [Test, Category("valid")]
        public void AssignCorrectPredecessorsInBFSTraversal()
        {
            var graph = new UndirectedUnweightedGraph<BFSVertex>();
            var v1 = graph.AddVertex(new BFSVertex());
            var v2 = graph.AddVertex(new BFSVertex());
            var v3 = graph.AddVertex(new BFSVertex());
            var v4 = graph.AddVertex(new BFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v1, v3);
            graph.AddEdge(v2, v4);

            bfs.Run(graph, v1);

            Assert.IsNull(v1.Value.Predecessor);
            Assert.AreEqual(v1, v2.Value.Predecessor);
            Assert.AreEqual(v1, v3.Value.Predecessor);
            Assert.AreEqual(v2, v4.Value.Predecessor);
        }
    }
}
