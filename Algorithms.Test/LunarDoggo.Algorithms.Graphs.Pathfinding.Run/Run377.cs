// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=Run_a2e9436d0a
ROOST_METHOD_SIG_HASH=Run_9ce955ed80

   ########## Test-Scenarios ##########  

Based on the provided method and related code, here are several test scenarios for the `Run` method of the `DepthFirstSearch` class:

Scenario 1: Null Graph Input

Details:
  TestName: TestRunWithNullGraphThrowsArgumentNullException
  Description: Verify that the Run method throws an ArgumentNullException when passed a null graph.
Execution:
  Arrange: Create a DepthFirstSearch instance.
  Act: Call the Run method with a null graph.
  Assert: Verify that an ArgumentNullException is thrown.
Validation:
  This test ensures that the method properly handles null input, preventing potential null reference exceptions later in the execution.

Scenario 2: Empty Graph

Details:
  TestName: TestRunWithEmptyGraphCompletesWithoutError
  Description: Ensure that the Run method completes successfully when given an empty graph.
Execution:
  Arrange: Create a DepthFirstSearch instance and an empty UndirectedUnweightedGraph<DFSVertex>.
  Act: Call the Run method with the empty graph.
  Assert: Verify that the method completes without throwing any exceptions.
Validation:
  This test confirms that the method can handle edge cases like empty graphs without errors.

Scenario 3: Single Vertex Graph

Details:
  TestName: TestRunWithSingleVertexGraphProcessesCorrectly
  Description: Check if the Run method correctly processes a graph with a single vertex.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with one vertex.
  Act: Call the Run method with the graph.
  Assert: Verify that the vertex's DFSVertex value has been processed (StartTime and EndTime are set).
Validation:
  This test ensures that the method correctly handles the simplest non-empty graph case.

Scenario 4: Connected Graph Processing

Details:
  TestName: TestRunProcessesAllVerticesInConnectedGraph
  Description: Verify that all vertices in a connected graph are processed.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with multiple connected vertices.
  Act: Call the Run method with the graph.
  Assert: Check that all vertices have been processed (StartTime and EndTime are set for all vertices).
Validation:
  This test ensures that the DFS algorithm visits all vertices in a connected graph.

Scenario 5: Disconnected Graph Processing

Details:
  TestName: TestRunProcessesAllComponentsInDisconnectedGraph
  Description: Ensure that all components of a disconnected graph are processed.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with multiple disconnected components.
  Act: Call the Run method with the graph.
  Assert: Verify that all vertices in all components have been processed.
Validation:
  This test checks if the method correctly handles disconnected graphs by processing all components.

Scenario 6: Correct Start and End Times

Details:
  TestName: TestRunAssignsCorrectStartAndEndTimes
  Description: Check if the start and end times are assigned correctly for each vertex.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with a known structure.
  Act: Call the Run method with the graph.
  Assert: Verify that for each vertex, StartTime < EndTime, and that the times are consistent with DFS order.
Validation:
  This test ensures that the time assignment logic in the DFS algorithm is working correctly.

Scenario 7: Predecessor Assignment

Details:
  TestName: TestRunAssignsCorrectPredecessors
  Description: Verify that predecessors are correctly assigned during the DFS traversal.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with a known structure.
  Act: Call the Run method with the graph.
  Assert: Check that predecessors are assigned correctly according to the DFS traversal order.
Validation:
  This test ensures that the predecessor assignment logic in the DFS algorithm is functioning properly.

Scenario 8: Graph with Pre-existing DFSVertex Values

Details:
  TestName: TestRunCorrectlyReInitializesExistingDFSVertexValues
  Description: Ensure that the Run method correctly reinitializes DFSVertex values if they already exist.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> where vertices already have DFSVertex values set.
  Act: Call the Run method with the graph.
  Assert: Verify that all vertices have been reinitialized and processed correctly.
Validation:
  This test checks if the method properly handles graphs where vertices might have pre-existing DFS-related data.

These scenarios cover various aspects of the `Run` method, including edge cases, error handling, and core functionality of the Depth-First Search algorithm.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.Datastructures.Graphs;
using LunarDoggo.Algorithms.Graphs.Pathfinding;
using System;

namespace LunarDoggo.Algorithms.Graphs.Pathfinding.Test
{
    [TestFixture]
    public class Run377Test
    {
        private DepthFirstSearch dfs;

        [SetUp]
        public void Setup()
        {
            dfs = new DepthFirstSearch();
        }

        [Test, Category("invalid")]
        public void TestRunWithNullGraphThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => dfs.Run(null));
        }

        [Test, Category("boundary")]
        public void TestRunWithEmptyGraphCompletesWithoutError()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            Assert.DoesNotThrow(() => dfs.Run(graph));
        }

        [Test, Category("valid")]
        public void TestRunWithSingleVertexGraphProcessesCorrectly()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertex = graph.AddVertex(new DFSVertex());

            dfs.Run(graph);

            Assert.That(vertex.Value.StartTime, Is.GreaterThanOrEqualTo(0));
            Assert.That(vertex.Value.EndTime, Is.GreaterThan(vertex.Value.StartTime));
        }

        [Test, Category("valid")]
        public void TestRunProcessesAllVerticesInConnectedGraph()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);

            dfs.Run(graph);

            foreach (var vertex in graph.Vertices)
            {
                Assert.That(vertex.Value.StartTime, Is.GreaterThanOrEqualTo(0));
                Assert.That(vertex.Value.EndTime, Is.GreaterThan(vertex.Value.StartTime));
            }
        }

        [Test, Category("valid")]
        public void TestRunProcessesAllComponentsInDisconnectedGraph()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            var v4 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v3, v4);

            dfs.Run(graph);

            foreach (var vertex in graph.Vertices)
            {
                Assert.That(vertex.Value.StartTime, Is.GreaterThanOrEqualTo(0));
                Assert.That(vertex.Value.EndTime, Is.GreaterThan(vertex.Value.StartTime));
            }
        }

        [Test, Category("valid")]
        public void TestRunAssignsCorrectStartAndEndTimes()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);

            dfs.Run(graph);

            Assert.That(v1.Value.StartTime, Is.LessThan(v1.Value.EndTime));
            Assert.That(v2.Value.StartTime, Is.LessThan(v2.Value.EndTime));
            Assert.That(v3.Value.StartTime, Is.LessThan(v3.Value.EndTime));

            Assert.That(v1.Value.StartTime, Is.LessThan(v2.Value.StartTime));
            Assert.That(v2.Value.StartTime, Is.LessThan(v3.Value.StartTime));
            Assert.That(v3.Value.EndTime, Is.LessThan(v2.Value.EndTime));
            Assert.That(v2.Value.EndTime, Is.LessThan(v1.Value.EndTime));
        }

        [Test, Category("valid")]
        public void TestRunAssignsCorrectPredecessors()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);

            dfs.Run(graph);

            Assert.That(v1.Value.Predecessor, Is.Null);
            Assert.That(v2.Value.Predecessor, Is.EqualTo(v1));
            Assert.That(v3.Value.Predecessor, Is.EqualTo(v2));
        }

        [Test, Category("valid")]
        public void TestRunCorrectlyReInitializesExistingDFSVertexValues()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex { StartTime = 5, EndTime = 10, Predecessor = new Vertex<DFSVertex>(99, new DFSVertex()) });
            var v2 = graph.AddVertex(new DFSVertex { StartTime = 15, EndTime = 20, Predecessor = v1 });
            graph.AddEdge(v1, v2);

            dfs.Run(graph);

            Assert.That(v1.Value.StartTime, Is.GreaterThanOrEqualTo(0));
            Assert.That(v1.Value.EndTime, Is.GreaterThan(v1.Value.StartTime));
            Assert.That(v1.Value.Predecessor, Is.Null);

            Assert.That(v2.Value.StartTime, Is.GreaterThanOrEqualTo(0));
            Assert.That(v2.Value.EndTime, Is.GreaterThan(v2.Value.StartTime));
            Assert.That(v2.Value.Predecessor, Is.EqualTo(v1));
        }
    }
}
