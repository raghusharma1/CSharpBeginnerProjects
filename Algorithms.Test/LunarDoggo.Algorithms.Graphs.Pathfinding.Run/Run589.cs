// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620

ROOST_METHOD_HASH=Run_a2e9436d0a
ROOST_METHOD_SIG_HASH=Run_9ce955ed80

   ########## Test-Scenarios ##########  

Based on the provided method and related code, here are several test scenarios for the `Run` method of the `DepthFirstSearch` class:

Scenario 1: Null Graph Input

Details:
  TestName: TestRunWithNullGraphThrowsArgumentNullException
  Description: Verify that the Run method throws an ArgumentNullException when passed a null graph.

Execution:
  Arrange: Create a DepthFirstSearch instance.
  Act: Call the Run method with a null graph.
  Assert: Verify that an ArgumentNullException is thrown.

Validation:
  This test ensures that the method properly handles null input, preventing potential null reference exceptions later in the execution.

Scenario 2: Empty Graph

Details:
  TestName: TestRunWithEmptyGraphCompletesWithoutError
  Description: Ensure that the Run method completes successfully when given an empty graph.

Execution:
  Arrange: Create a DepthFirstSearch instance and an empty UndirectedUnweightedGraph<DFSVertex>.
  Act: Call the Run method with the empty graph.
  Assert: Verify that the method completes without throwing any exceptions.

Validation:
  This test confirms that the method can handle edge cases like empty graphs without errors.

Scenario 3: Single Vertex Graph

Details:
  TestName: TestRunWithSingleVertexGraphSetsCorrectTimes
  Description: Check if the Run method correctly processes a graph with a single vertex.

Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with one vertex.
  Act: Call the Run method with the graph.
  Assert: Verify that the vertex's StartTime and EndTime are set and different, and Processed is true.

Validation:
  This test ensures that the basic DFS functionality works correctly for the simplest possible graph.

Scenario 4: Connected Graph

Details:
  TestName: TestRunWithConnectedGraphProcessesAllVertices
  Description: Verify that all vertices in a connected graph are processed.

Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with multiple connected vertices.
  Act: Call the Run method with the graph.
  Assert: Check that all vertices have been processed (Processed is true, StartTime and EndTime are set).

Validation:
  This test confirms that the DFS algorithm correctly traverses all vertices in a connected graph.

Scenario 5: Disconnected Graph

Details:
  TestName: TestRunWithDisconnectedGraphProcessesAllComponents
  Description: Ensure that all components of a disconnected graph are processed.

Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with multiple disconnected components.
  Act: Call the Run method with the graph.
  Assert: Verify that all vertices in all components have been processed.

Validation:
  This test checks that the DFS algorithm correctly handles disconnected graphs by processing all components.

Scenario 6: Cyclic Graph

Details:
  TestName: TestRunWithCyclicGraphCompletesWithoutInfiniteLoop
  Description: Check that the Run method successfully completes on a graph containing cycles.

Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with cycles.
  Act: Call the Run method with the graph.
  Assert: Verify that all vertices are processed and the method completes in a reasonable time.

Validation:
  This test ensures that the DFS algorithm correctly handles cycles without getting stuck in an infinite loop.

Scenario 7: Large Graph

Details:
  TestName: TestRunWithLargeGraphCompletesInReasonableTime
  Description: Verify that the Run method can handle a large graph efficiently.

Execution:
  Arrange: Create a DepthFirstSearch instance and a large UndirectedUnweightedGraph<DFSVertex>.
  Act: Call the Run method with the graph and measure execution time.
  Assert: Check that all vertices are processed and the execution time is within acceptable limits.

Validation:
  This test confirms that the DFS algorithm scales well to larger graphs and performs efficiently.

Scenario 8: Pre-initialized Graph

Details:
  TestName: TestRunWithPreInitializedGraphOverwritesValues
  Description: Ensure that the Run method correctly reinitializes and processes a graph with pre-existing DFSVertex values.

Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with vertices containing non-default DFSVertex values.
  Act: Call the Run method with the graph.
  Assert: Verify that all vertices have been reinitialized and processed correctly.

Validation:
  This test checks that the method properly handles graphs where vertices may have existing, potentially conflicting data.

These scenarios cover various aspects of the Run method, including edge cases, error handling, and different graph structures. They aim to ensure the correctness and robustness of the Depth-First Search implementation.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.Datastructures.Graphs;
using LunarDoggo.Algorithms.Graphs.Pathfinding;
using System;

namespace LunarDoggo.Algorithms.Graphs.Pathfinding.Test
{
    [TestFixture]
    public class Run589Test
    {
        private DepthFirstSearch dfs;

        [SetUp]
        public void Setup()
        {
            dfs = new DepthFirstSearch();
        }

        [Test, Category("invalid")]
        public void TestRunWithNullGraphThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => dfs.Run(null));
        }

        [Test, Category("valid")]
        public void TestRunWithEmptyGraphCompletesWithoutError()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            Assert.DoesNotThrow(() => dfs.Run(graph));
        }

        [Test, Category("valid")]
        public void TestRunWithSingleVertexGraphSetsCorrectTimes()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertex = graph.AddVertex(new DFSVertex());

            dfs.Run(graph);

            Assert.That(vertex.Value.Processed, Is.True);
            Assert.That(vertex.Value.StartTime, Is.GreaterThanOrEqualTo(0));
            Assert.That(vertex.Value.EndTime, Is.GreaterThan(vertex.Value.StartTime));
        }

        [Test, Category("valid")]
        public void TestRunWithConnectedGraphProcessesAllVertices()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);

            dfs.Run(graph);

            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => 
                v.Value.Processed && 
                v.Value.StartTime >= 0 && 
                v.Value.EndTime > v.Value.StartTime));
        }

        [Test, Category("valid")]
        public void TestRunWithDisconnectedGraphProcessesAllComponents()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            var v4 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v3, v4);

            dfs.Run(graph);

            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => 
                v.Value.Processed && 
                v.Value.StartTime >= 0 && 
                v.Value.EndTime > v.Value.StartTime));
        }

        [Test, Category("valid")]
        public void TestRunWithCyclicGraphCompletesWithoutInfiniteLoop()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);
            graph.AddEdge(v3, v1);

            Assert.DoesNotThrow(() => dfs.Run(graph));
            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => v.Value.Processed));
        }

        [Test, Category("valid")]
        public void TestRunWithLargeGraphCompletesInReasonableTime()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            for (int i = 0; i < 10000; i++)
            {
                graph.AddVertex(new DFSVertex());
            }

            Assert.That(() => dfs.Run(graph), Throws.Nothing.And.CompletesBefore(TimeSpan.FromSeconds(5)));
        }

        [Test, Category("valid")]
        public void TestRunWithPreInitializedGraphOverwritesValues()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex { StartTime = 10, EndTime = 20 });
            var v2 = graph.AddVertex(new DFSVertex { StartTime = 30, EndTime = 40 });
            graph.AddEdge(v1, v2);

            dfs.Run(graph);

            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => 
                v.Value.Processed && 
                v.Value.StartTime >= 0 && 
                v.Value.StartTime != 10 && 
                v.Value.StartTime != 30 && 
                v.Value.EndTime > v.Value.StartTime));
        }
    }
}
