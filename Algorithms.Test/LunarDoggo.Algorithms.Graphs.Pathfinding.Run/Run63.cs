// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620

ROOST_METHOD_HASH=Run_a2e9436d0a
ROOST_METHOD_SIG_HASH=Run_9ce955ed80

   ########## Test-Scenarios ##########  

Based on the provided method and related code, here are several test scenarios for the `Run` method of the `DepthFirstSearch` class:

Scenario 1: Null Graph Input

Details:
  TestName: ThrowArgumentNullExceptionWhenGraphIsNull
  Description: Verify that the method throws an ArgumentNullException when a null graph is provided.
Execution:
  Arrange: Create a DepthFirstSearch instance.
  Act: Call the Run method with a null graph.
  Assert: Expect an ArgumentNullException to be thrown.
Validation:
  This test ensures that the method properly handles null input, preventing potential null reference exceptions later in the execution.

Scenario 2: Empty Graph

Details:
  TestName: ProcessEmptyGraphWithoutException
  Description: Ensure the method can handle an empty graph without throwing exceptions.
Execution:
  Arrange: Create a DepthFirstSearch instance and an empty IGraph<DFSVertex>.
  Act: Call the Run method with the empty graph.
  Assert: Verify that no exception is thrown and the method completes successfully.
Validation:
  This test confirms that the method can handle edge cases like empty graphs gracefully.

Scenario 3: Single Vertex Graph

Details:
  TestName: ProcessSingleVertexGraphCorrectly
  Description: Check if the method correctly processes a graph with a single vertex.
Execution:
  Arrange: Create a DepthFirstSearch instance and an IGraph<DFSVertex> with one vertex.
  Act: Call the Run method with the single-vertex graph.
  Assert: Verify that the vertex's StartTime and EndTime are set and Processed is true.
Validation:
  This test ensures that the basic functionality works for the simplest possible graph.

Scenario 4: Linear Graph

Details:
  TestName: ProcessLinearGraphInCorrectOrder
  Description: Verify that a linear graph (A -> B -> C) is processed in the correct order.
Execution:
  Arrange: Create a DepthFirstSearch instance and a linear IGraph<DFSVertex> with three vertices.
  Act: Call the Run method with the linear graph.
  Assert: Check that the StartTime and EndTime for each vertex are in the correct order (A < B < C).
Validation:
  This test confirms that the depth-first search traverses a simple path correctly.

Scenario 5: Cyclic Graph

Details:
  TestName: HandleCyclicGraphWithoutInfiniteLoop
  Description: Ensure the method can process a cyclic graph without getting stuck in an infinite loop.
Execution:
  Arrange: Create a DepthFirstSearch instance and an IGraph<DFSVertex> with a cycle (e.g., A -> B -> C -> A).
  Act: Call the Run method with the cyclic graph.
  Assert: Verify that all vertices are processed and have valid StartTime and EndTime values.
Validation:
  This test checks that the method can handle cycles in the graph, which is crucial for preventing infinite recursion.

Scenario 6: Disconnected Graph

Details:
  TestName: ProcessAllComponentsOfDisconnectedGraph
  Description: Check if the method processes all components of a disconnected graph.
Execution:
  Arrange: Create a DepthFirstSearch instance and an IGraph<DFSVertex> with multiple disconnected components.
  Act: Call the Run method with the disconnected graph.
  Assert: Verify that all vertices in all components are processed.
Validation:
  This test ensures that the method can handle graphs that are not fully connected, processing all vertices regardless of connectivity.

Scenario 7: Graph with Pre-existing DFSVertex Values

Details:
  TestName: ResetExistingDFSVertexValuesBeforeProcessing
  Description: Verify that the method correctly resets and processes vertices that already have DFSVertex values.
Execution:
  Arrange: Create a DepthFirstSearch instance and an IGraph<DFSVertex> where vertices have pre-set DFSVertex values.
  Act: Call the Run method with this graph.
  Assert: Check that all vertices have been reinitialized and processed correctly.
Validation:
  This test confirms that the method properly initializes all vertices before processing, regardless of their initial state.

Scenario 8: Large Graph Performance

Details:
  TestName: ProcessLargeGraphWithinReasonableTime
  Description: Ensure the method can handle a large graph within a reasonable time frame.
Execution:
  Arrange: Create a DepthFirstSearch instance and a large IGraph<DFSVertex> (e.g., 10000 vertices).
  Act: Call the Run method with the large graph and measure execution time.
  Assert: Verify that all vertices are processed and the execution time is within an acceptable range.
Validation:
  This test checks the performance characteristics of the method for large inputs, ensuring it scales reasonably.

These test scenarios cover various aspects of the `Run` method, including edge cases, error handling, and different graph structures. They aim to ensure the correctness and robustness of the Depth-First Search implementation.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.Datastructures.Graphs;
using LunarDoggo.Algorithms.Graphs.Pathfinding;
using System;
using System.Linq;

namespace LunarDoggo.Algorithms.Graphs.Pathfinding.Test
{
    [TestFixture]
    public class Run63Test
    {
        private DepthFirstSearch dfs;

        [SetUp]
        public void Setup()
        {
            dfs = new DepthFirstSearch();
        }

        [Test, Category("invalid")]
        public void ThrowArgumentNullExceptionWhenGraphIsNull()
        {
            Assert.Throws<ArgumentNullException>(() => dfs.Run(null));
        }

        [Test, Category("valid")]
        public void ProcessEmptyGraphWithoutException()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            Assert.DoesNotThrow(() => dfs.Run(graph));
        }

        [Test, Category("valid")]
        public void ProcessSingleVertexGraphCorrectly()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertex = graph.AddVertex(new DFSVertex());

            dfs.Run(graph);

            Assert.That(vertex.Value.Processed, Is.True);
            Assert.That(vertex.Value.StartTime, Is.GreaterThanOrEqualTo(0));
            Assert.That(vertex.Value.EndTime, Is.GreaterThan(vertex.Value.StartTime));
        }

        [Test, Category("valid")]
        public void ProcessLinearGraphInCorrectOrder()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertexA = graph.AddVertex(new DFSVertex());
            var vertexB = graph.AddVertex(new DFSVertex());
            var vertexC = graph.AddVertex(new DFSVertex());
            graph.AddEdge(vertexA, vertexB);
            graph.AddEdge(vertexB, vertexC);

            dfs.Run(graph);

            Assert.That(vertexA.Value.StartTime, Is.LessThan(vertexB.Value.StartTime));
            Assert.That(vertexB.Value.StartTime, Is.LessThan(vertexC.Value.StartTime));
            Assert.That(vertexC.Value.EndTime, Is.LessThan(vertexB.Value.EndTime));
            Assert.That(vertexB.Value.EndTime, Is.LessThan(vertexA.Value.EndTime));
        }

        [Test, Category("valid")]
        public void HandleCyclicGraphWithoutInfiniteLoop()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertexA = graph.AddVertex(new DFSVertex());
            var vertexB = graph.AddVertex(new DFSVertex());
            var vertexC = graph.AddVertex(new DFSVertex());
            graph.AddEdge(vertexA, vertexB);
            graph.AddEdge(vertexB, vertexC);
            graph.AddEdge(vertexC, vertexA);

            dfs.Run(graph);

            Assert.That(graph.Vertices.All(v => v.Value.Processed), Is.True);
            Assert.That(graph.Vertices.All(v => v.Value.StartTime >= 0), Is.True);
            Assert.That(graph.Vertices.All(v => v.Value.EndTime > v.Value.StartTime), Is.True);
        }

        [Test, Category("valid")]
        public void ProcessAllComponentsOfDisconnectedGraph()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertexA = graph.AddVertex(new DFSVertex());
            var vertexB = graph.AddVertex(new DFSVertex());
            var vertexC = graph.AddVertex(new DFSVertex());
            var vertexD = graph.AddVertex(new DFSVertex());
            graph.AddEdge(vertexA, vertexB);
            graph.AddEdge(vertexC, vertexD);

            dfs.Run(graph);

            Assert.That(graph.Vertices.All(v => v.Value.Processed), Is.True);
        }

        [Test, Category("valid")]
        public void ResetExistingDFSVertexValuesBeforeProcessing()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertexA = graph.AddVertex(new DFSVertex { StartTime = 5, EndTime = 10 });
            var vertexB = graph.AddVertex(new DFSVertex { StartTime = 15, EndTime = 20 });
            graph.AddEdge(vertexA, vertexB);

            dfs.Run(graph);

            Assert.That(vertexA.Value.StartTime, Is.Not.EqualTo(5));
            Assert.That(vertexA.Value.EndTime, Is.Not.EqualTo(10));
            Assert.That(vertexB.Value.StartTime, Is.Not.EqualTo(15));
            Assert.That(vertexB.Value.EndTime, Is.Not.EqualTo(20));
            Assert.That(vertexA.Value.StartTime, Is.LessThan(vertexA.Value.EndTime));
            Assert.That(vertexB.Value.StartTime, Is.LessThan(vertexB.Value.EndTime));
        }

        [Test, Category("valid")]
        public void ProcessLargeGraphWithinReasonableTime()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertices = Enumerable.Range(0, 10000).Select(_ => graph.AddVertex(new DFSVertex())).ToList();
            for (int i = 0; i < vertices.Count - 1; i++)
            {
                graph.AddEdge(vertices[i], vertices[i + 1]);
            }

            var startTime = DateTime.Now;
            dfs.Run(graph);
            var endTime = DateTime.Now;

            Assert.That(graph.Vertices.All(v => v.Value.Processed), Is.True);
            Assert.That((endTime - startTime).TotalSeconds, Is.LessThan(5)); // Adjust the time limit as needed
        }
    }
}
