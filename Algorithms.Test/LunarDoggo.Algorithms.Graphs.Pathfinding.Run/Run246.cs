// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=Run_a2e9436d0a
ROOST_METHOD_SIG_HASH=Run_9ce955ed80

   ########## Test-Scenarios ##########  

Based on the provided method and related code, here are several test scenarios for the `Run` method of the `DepthFirstSearch` class:

Scenario 1: Null Graph Input

Details:
  TestName: TestRunWithNullGraphThrowsArgumentNullException
  Description: Verify that the Run method throws an ArgumentNullException when passed a null graph.
Execution:
  Arrange: Create a DepthFirstSearch instance.
  Act: Call the Run method with a null graph.
  Assert: Expect an ArgumentNullException to be thrown.
Validation:
  This test ensures that the method properly handles null input, preventing potential null reference exceptions later in the execution.

Scenario 2: Empty Graph

Details:
  TestName: TestRunWithEmptyGraphCompletesWithoutError
  Description: Ensure that the Run method completes successfully when given an empty graph.
Execution:
  Arrange: Create a DepthFirstSearch instance and an empty UndirectedUnweightedGraph<DFSVertex>.
  Act: Call the Run method with the empty graph.
  Assert: Verify that the method completes without throwing any exceptions.
Validation:
  This test confirms that the method can handle edge cases like empty graphs without errors.

Scenario 3: Single Vertex Graph

Details:
  TestName: TestRunWithSingleVertexGraphSetsCorrectTimes
  Description: Check if the Run method correctly processes a graph with a single vertex.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with one vertex.
  Act: Call the Run method with the graph.
  Assert: Verify that the vertex's StartTime and EndTime are set and different, and Processed is true.
Validation:
  This test ensures that the basic DFS functionality works for the simplest possible graph.

Scenario 4: Linear Graph

Details:
  TestName: TestRunWithLinearGraphSetsCorrectTimesAndPredecessors
  Description: Verify that the Run method correctly processes a linear graph (a path).
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with multiple vertices connected linearly.
  Act: Call the Run method with the graph.
  Assert: Check that all vertices are processed, have increasing StartTimes and EndTimes, and correct Predecessor relationships.
Validation:
  This test confirms that the DFS algorithm correctly traverses a simple path, setting times and predecessors appropriately.

Scenario 5: Cyclic Graph

Details:
  TestName: TestRunWithCyclicGraphProcessesAllVertices
  Description: Ensure that the Run method correctly handles a graph containing cycles.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with a cycle.
  Act: Call the Run method with the graph.
  Assert: Verify that all vertices are processed, have valid StartTimes and EndTimes, and the cycle is correctly traversed.
Validation:
  This test checks that the DFS algorithm can handle cycles without getting stuck in an infinite loop.

Scenario 6: Disconnected Graph

Details:
  TestName: TestRunWithDisconnectedGraphProcessesAllComponents
  Description: Check if the Run method processes all components of a disconnected graph.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex> with multiple disconnected components.
  Act: Call the Run method with the graph.
  Assert: Ensure all vertices in all components are processed and have valid StartTimes and EndTimes.
Validation:
  This test confirms that the method can handle disconnected graphs, processing all vertices regardless of connectivity.

Scenario 7: Pre-Initialized Graph

Details:
  TestName: TestRunWithPreInitializedGraphReInitializesCorrectly
  Description: Verify that the Run method correctly re-initializes a graph that has been previously processed.
Execution:
  Arrange: Create a DepthFirstSearch instance and a UndirectedUnweightedGraph<DFSVertex>. Pre-initialize some vertices with non-default values.
  Act: Call the Run method with the graph.
  Assert: Check that all vertices are processed and have new, valid StartTimes and EndTimes, overwriting any pre-existing values.
Validation:
  This test ensures that the method properly resets and re-initializes the graph before processing, avoiding issues with stale data.

These scenarios cover various aspects of the `Run` method, including edge cases, different graph structures, and potential issues with graph state. They aim to thoroughly test the depth-first search implementation.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.Datastructures.Graphs;
using LunarDoggo.Algorithms.Graphs.Pathfinding;
using System;

namespace LunarDoggo.Algorithms.Graphs.Pathfinding.Test
{
    [TestFixture]
    public class Run246Test
    {
        private DepthFirstSearch dfs;

        [SetUp]
        public void Setup()
        {
            dfs = new DepthFirstSearch();
        }

        [Test]
        [Category("invalid")]
        public void TestRunWithNullGraphThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => dfs.Run(null));
        }

        [Test]
        [Category("valid")]
        public void TestRunWithEmptyGraphCompletesWithoutError()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            Assert.DoesNotThrow(() => dfs.Run(graph));
        }

        [Test]
        [Category("valid")]
        public void TestRunWithSingleVertexGraphSetsCorrectTimes()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertex = graph.AddVertex(new DFSVertex());

            dfs.Run(graph);

            Assert.That(vertex.Value.StartTime, Is.GreaterThanOrEqualTo(0));
            Assert.That(vertex.Value.EndTime, Is.GreaterThan(vertex.Value.StartTime));
            Assert.That(vertex.Value.Processed, Is.True);
        }

        [Test]
        [Category("valid")]
        public void TestRunWithLinearGraphSetsCorrectTimesAndPredecessors()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);

            dfs.Run(graph);

            Assert.That(v1.Value.StartTime, Is.LessThan(v2.Value.StartTime));
            Assert.That(v2.Value.StartTime, Is.LessThan(v3.Value.StartTime));
            Assert.That(v3.Value.EndTime, Is.LessThan(v2.Value.EndTime));
            Assert.That(v2.Value.EndTime, Is.LessThan(v1.Value.EndTime));
            Assert.That(v2.Value.Predecessor, Is.EqualTo(v1));
            Assert.That(v3.Value.Predecessor, Is.EqualTo(v2));
        }

        [Test]
        [Category("valid")]
        public void TestRunWithCyclicGraphProcessesAllVertices()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);
            graph.AddEdge(v3, v1);

            dfs.Run(graph);

            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => v.Value.Processed));
            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => v.Value.StartTime >= 0));
            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => v.Value.EndTime > v.Value.StartTime));
        }

        [Test]
        [Category("valid")]
        public void TestRunWithDisconnectedGraphProcessesAllComponents()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            var v4 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v3, v4);

            dfs.Run(graph);

            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => v.Value.Processed));
            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => v.Value.StartTime >= 0));
            Assert.That(graph.Vertices, Has.All.Matches<Vertex<DFSVertex>>(v => v.Value.EndTime > v.Value.StartTime));
        }

        [Test]
        [Category("valid")]
        public void TestRunWithPreInitializedGraphReInitializesCorrectly()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex { StartTime = 10, EndTime = 20 });
            var v2 = graph.AddVertex(new DFSVertex { StartTime = 30, EndTime = 40 });
            graph.AddEdge(v1, v2);

            dfs.Run(graph);

            Assert.That(v1.Value.StartTime, Is.Not.EqualTo(10));
            Assert.That(v1.Value.EndTime, Is.Not.EqualTo(20));
            Assert.That(v2.Value.StartTime, Is.Not.EqualTo(30));
            Assert.That(v2.Value.EndTime, Is.Not.EqualTo(40));
            Assert.That(v1.Value.StartTime, Is.LessThan(v1.Value.EndTime));
            Assert.That(v2.Value.StartTime, Is.LessThan(v2.Value.EndTime));
        }
    }
}
