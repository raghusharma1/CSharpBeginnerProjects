// ********RoostGPT********
/*
Test generated by RoostGPT for test sampleCSharpEnv using AI Type  and AI Model 

ROOST_METHOD_HASH=Run_a2e9436d0a
ROOST_METHOD_SIG_HASH=Run_9ce955ed80

   ########## Test-Scenarios ##########  

Based on the provided method and related code, here are several test scenarios for the `Run` method of the `DepthFirstSearch` class:

Scenario 1: Null Graph Input

Details:
  TestName: ThrowArgumentNullExceptionWhenGraphIsNull
  Description: Verify that the method throws an ArgumentNullException when a null graph is provided.
Execution:
  Arrange: Create a DepthFirstSearch instance with no graph.
  Act: Call the Run method with a null graph.
  Assert: Expect an ArgumentNullException to be thrown.
Validation:
  This test ensures that the method properly handles null input, preventing potential null reference exceptions later in the execution.

Scenario 2: Empty Graph

Details:
  TestName: ProcessEmptyGraphWithoutException
  Description: Ensure the method can handle an empty graph without throwing exceptions.
Execution:
  Arrange: Create a DepthFirstSearch instance and an empty IGraph<DFSVertex>.
  Act: Call the Run method with the empty graph.
  Assert: Verify that no exception is thrown and the method completes successfully.
Validation:
  This test confirms that the method can handle edge cases like empty graphs gracefully.

Scenario 3: Single Vertex Graph

Details:
  TestName: ProcessSingleVertexGraphCorrectly
  Description: Check if the method correctly processes a graph with only one vertex.
Execution:
  Arrange: Create a DepthFirstSearch instance and an IGraph<DFSVertex> with a single vertex.
  Act: Call the Run method with the single-vertex graph.
  Assert: Verify that the vertex is marked as processed and has valid start and end times.
Validation:
  This test ensures that the basic functionality works for the simplest possible graph.

Scenario 4: Connected Graph Processing

Details:
  TestName: ProcessAllVerticesInConnectedGraph
  Description: Verify that all vertices in a connected graph are processed.
Execution:
  Arrange: Create a DepthFirstSearch instance and a connected IGraph<DFSVertex> with multiple vertices.
  Act: Call the Run method with the connected graph.
  Assert: Check that all vertices are marked as processed and have valid start and end times.
Validation:
  This test confirms that the method correctly traverses all vertices in a connected graph.

Scenario 5: Disconnected Graph Processing

Details:
  TestName: ProcessAllComponentsInDisconnectedGraph
  Description: Ensure that all components of a disconnected graph are processed.
Execution:
  Arrange: Create a DepthFirstSearch instance and a disconnected IGraph<DFSVertex> with multiple components.
  Act: Call the Run method with the disconnected graph.
  Assert: Verify that all vertices across all components are processed and have valid start and end times.
Validation:
  This test checks if the method can handle disconnected graphs and process all components independently.

Scenario 6: Correct Time Assignment

Details:
  TestName: AssignCorrectStartAndEndTimes
  Description: Check if start and end times are assigned correctly to vertices during traversal.
Execution:
  Arrange: Create a DepthFirstSearch instance and an IGraph<DFSVertex> with a known structure.
  Act: Call the Run method with the graph.
  Assert: Verify that the start and end times for each vertex are consistent with DFS traversal order.
Validation:
  This test ensures that the time assignment logic in the DFS algorithm is working correctly.

Scenario 7: Predecessor Assignment

Details:
  TestName: AssignCorrectPredecessors
  Description: Verify that predecessors are correctly assigned during graph traversal.
Execution:
  Arrange: Create a DepthFirstSearch instance and an IGraph<DFSVertex> with a known structure.
  Act: Call the Run method with the graph.
  Assert: Check that each vertex (except the start vertex) has a correct predecessor assigned.
Validation:
  This test confirms that the predecessor assignment, which is crucial for path reconstruction, is working as expected.

Scenario 8: Cyclic Graph Handling

Details:
  TestName: ProcessCyclicGraphWithoutInfiniteLoop
  Description: Ensure that the method can process a graph containing cycles without entering an infinite loop.
Execution:
  Arrange: Create a DepthFirstSearch instance and an IGraph<DFSVertex> containing at least one cycle.
  Act: Call the Run method with the cyclic graph.
  Assert: Verify that all vertices are processed and the method terminates.
Validation:
  This test checks if the method can handle cyclic graphs correctly, which is important for robustness.

These test scenarios cover various aspects of the `Run` method, including edge cases, different graph structures, and key functionalities of the Depth-First Search algorithm.


*/

// ********RoostGPT********
using NUnit.Framework;
using LunarDoggo.Datastructures.Graphs;
using LunarDoggo.Algorithms.Graphs.Pathfinding;
using System;
using System.Linq;

namespace LunarDoggo.Algorithms.Graphs.Pathfinding.Test
{
    [TestFixture]
    public class Run379Test
    {
        private DepthFirstSearch dfs;

        [SetUp]
        public void Setup()
        {
            dfs = new DepthFirstSearch();
        }

        [Test, Category("invalid")]
        public void ThrowArgumentNullExceptionWhenGraphIsNull()
        {
            Assert.Throws<ArgumentNullException>(() => dfs.Run(null));
        }

        [Test, Category("valid")]
        public void ProcessEmptyGraphWithoutException()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            Assert.DoesNotThrow(() => dfs.Run(graph));
        }

        [Test, Category("valid")]
        public void ProcessSingleVertexGraphCorrectly()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var vertex = graph.AddVertex(new DFSVertex());

            dfs.Run(graph);

            Assert.IsTrue(vertex.Value.Processed);
            Assert.That(vertex.Value.StartTime, Is.GreaterThanOrEqualTo(0));
            Assert.That(vertex.Value.EndTime, Is.GreaterThan(vertex.Value.StartTime));
        }

        [Test, Category("valid")]
        public void ProcessAllVerticesInConnectedGraph()
        {
            var graph = CreateConnectedGraph();

            dfs.Run(graph);

            Assert.IsTrue(graph.Vertices.All(v => v.Value.Processed));
            Assert.IsTrue(graph.Vertices.All(v => v.Value.StartTime >= 0));
            Assert.IsTrue(graph.Vertices.All(v => v.Value.EndTime > v.Value.StartTime));
        }

        [Test, Category("valid")]
        public void ProcessAllComponentsInDisconnectedGraph()
        {
            var graph = CreateDisconnectedGraph();

            dfs.Run(graph);

            Assert.IsTrue(graph.Vertices.All(v => v.Value.Processed));
            Assert.IsTrue(graph.Vertices.All(v => v.Value.StartTime >= 0));
            Assert.IsTrue(graph.Vertices.All(v => v.Value.EndTime > v.Value.StartTime));
        }

        [Test, Category("valid")]
        public void AssignCorrectStartAndEndTimes()
        {
            var graph = CreateConnectedGraph();

            dfs.Run(graph);

            var sortedVertices = graph.Vertices.OrderBy(v => v.Value.StartTime).ToList();
            for (int i = 0; i < sortedVertices.Count - 1; i++)
            {
                Assert.That(sortedVertices[i].Value.EndTime, Is.LessThanOrEqualTo(sortedVertices[i + 1].Value.EndTime));
            }
        }

        [Test, Category("valid")]
        public void AssignCorrectPredecessors()
        {
            var graph = CreateConnectedGraph();

            dfs.Run(graph);

            Assert.IsTrue(graph.Vertices.Count(v => v.Value.Predecessor == null) == 1);
            Assert.IsTrue(graph.Vertices.Where(v => v.Value.Predecessor != null)
                .All(v => v.Value.Predecessor.Value.StartTime < v.Value.StartTime));
        }

        [Test, Category("valid")]
        public void ProcessCyclicGraphWithoutInfiniteLoop()
        {
            var graph = CreateCyclicGraph();

            dfs.Run(graph);

            Assert.IsTrue(graph.Vertices.All(v => v.Value.Processed));
            Assert.IsTrue(graph.Vertices.All(v => v.Value.StartTime >= 0));
            Assert.IsTrue(graph.Vertices.All(v => v.Value.EndTime > v.Value.StartTime));
        }

        private IGraph<DFSVertex> CreateConnectedGraph()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);
            return graph;
        }

        private IGraph<DFSVertex> CreateDisconnectedGraph()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            return graph;
        }

        private IGraph<DFSVertex> CreateCyclicGraph()
        {
            var graph = new UndirectedUnweightedGraph<DFSVertex>();
            var v1 = graph.AddVertex(new DFSVertex());
            var v2 = graph.AddVertex(new DFSVertex());
            var v3 = graph.AddVertex(new DFSVertex());
            graph.AddEdge(v1, v2);
            graph.AddEdge(v2, v3);
            graph.AddEdge(v3, v1);
            return graph;
        }
    }
}
